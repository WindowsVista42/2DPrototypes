#include <raylib.h>
#include <raymath.h>
#include <iostream>

struct Light {
  int attachment_id;
  int x;
  int y;
  float bright;
};

#define LIGHTS_SIZE 1
static Light lights[LIGHTS_SIZE] = {
  {0, -1, -1, 2.0},
  //{-1, 12, 13, 2.0},
  //{.attachment_id = -1, .x =  4, .y = 20, .bright = 2.0},
  //{.attachment_id = -1, .x = 12, .y = 16, .bright = 2.0},
  //{.attachment_id = -1, .x = 31, .y = 13, .bright = 2.0},
};
static float brightness[2][32][32] = {};
static int occupancy[32][32] = {
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,},
  { 0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,},
  { 0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,},
  { 0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,},
  { 0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,},
  { 0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,},
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,1,1,1,1,1,1,1,0,},
  { 0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,1,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,},
  { 0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,},
  { 0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,},
  { 0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,},
  { 0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,},
  { 0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,},
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,},
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
};
//  { 0,0,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,0,0,0,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,},
//  { 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,},
//  { 0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,},
//  { 1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0,},
//  { 1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
//};

static int fog[32][32] = {
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 1,0,0,0,0,0,0,2,2,2,1,1,1,1,2,0,0,0,0,0,0,0,2,2,2,1,1,1,1,2,},
  { 1,0,0,0,0,0,1,3,4,2,4,4,4,4,4,0,0,0,0,0,0,1,3,4,2,4,4,4,4,4,},
  { 1,1,0,0,0,0,2,3,4,4,4,4,4,4,2,0,0,0,0,0,0,2,3,4,4,4,4,4,4,2,},
  { 1,1,0,0,0,0,0,3,4,4,4,4,4,2,2,0,1,1,0,0,0,0,3,4,4,4,4,4,2,2,},
  { 1,1,1,1,0,0,0,3,4,4,4,3,3,1,0,1,2,1,0,0,0,0,3,4,4,4,3,3,1,0,},
  { 1,1,1,1,1,0,0,3,3,3,4,3,2,1,0,1,2,1,0,0,0,0,3,3,3,4,3,2,1,0,},
  { 1,1,1,1,1,0,0,0,3,2,3,3,1,1,1,1,1,2,1,0,0,0,0,3,2,3,3,1,0,0,},
  { 1,1,1,0,1,1,0,0,2,2,3,3,1,1,0,0,0,2,2,1,0,0,0,2,2,3,3,1,0,0,},
  { 1,1,1,1,0,1,0,0,2,3,3,3,1,2,0,0,0,1,2,1,0,0,0,2,3,3,3,1,0,0,},
  { 1,1,1,1,0,0,0,0,4,2,3,1,2,3,1,1,1,3,2,1,0,0,0,4,2,3,1,0,0,0,},
  { 1,1,1,1,1,1,0,0,3,2,2,1,1,4,2,3,1,1,0,1,0,0,0,3,2,0,0,0,0,0,},
  { 1,1,1,1,0,1,0,0,1,1,1,4,4,4,4,3,4,2,0,0,0,0,0,1,1,0,0,0,0,0,},
  { 1,1,1,1,1,0,0,0,0,0,0,1,2,2,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 1,1,1,1,0,0,0,0,0,0,0,0,1,1,3,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 1,1,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
  { 1,1,1,0,1,1,0,2,2,2,1,1,1,1,2,0,0,0,0,0,0,0,2,2,2,1,1,1,1,2,},
  { 1,1,1,0,1,0,1,3,4,2,4,4,4,4,4,0,0,0,0,0,0,1,3,4,2,4,4,4,4,4,},
  { 1,1,0,1,0,0,2,3,4,4,4,4,4,4,2,0,0,0,0,0,0,2,3,4,4,4,4,4,4,2,},
  { 1,1,0,1,1,1,0,3,4,4,4,4,4,2,2,0,0,0,0,0,0,0,3,4,4,4,4,4,2,2,},
  { 1,0,1,1,1,0,0,3,4,4,4,3,3,1,0,0,0,0,0,0,0,0,3,4,4,4,3,3,1,0,},
  { 1,0,1,0,1,1,0,3,3,3,4,3,2,1,0,0,0,0,0,0,0,0,3,3,3,4,3,2,1,0,},
  { 1,0,1,0,0,0,0,0,3,2,3,3,1,0,0,0,0,0,0,0,0,0,0,3,2,3,3,1,0,0,},
  { 0,1,1,1,0,0,0,0,2,2,3,3,1,0,0,0,0,0,0,0,0,0,0,2,2,3,3,1,0,0,},
  { 1,1,0,1,0,0,0,1,2,3,3,3,1,0,0,0,0,0,0,0,0,0,0,2,3,3,3,1,0,0,},
  { 0,0,0,1,0,1,1,1,4,2,3,1,0,0,0,0,0,0,0,0,0,0,0,4,2,3,1,0,0,0,},
  { 1,1,1,0,0,1,1,0,3,2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,2,0,0,0,0,0,},
  { 0,1,1,1,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,},
  { 0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,},
};

static int c = 0;

float fog_calc(int a) {
  return 1.0f - ((float)a * 0.15f);
}

bool bounds(long x, long y) {
  return x >= 0 && y >= 0 && x < 32 && y < 32;
}

void propegate_brightness() {
  for(long x = 0; x < 32; x += 1) {
    for(long y = 0; y < 32; y += 1) {
      long wx = x;
      long wy = y;

      float b = 0.0f;

      wx = x - 1; wy = y;
      if(bounds(wx, wy)) {
        b += fog_calc(fog[wx][wy]) * brightness[c][wx][wy];
      }

      //wx = x - 1; wy = y + 1;
      //if(bounds(wx, wy)) {
      //  b += brightness[c][wx][wy];
      //}

      wx = x; wy = y + 1;
      if(bounds(wx, wy)) {
        b += fog_calc(fog[wx][wy]) * brightness[c][wx][wy];
      }

      //wx = x + 1; wy = y + 1;
      //if(bounds(wx, wy)) {
      //  b += brightness[c][wx][wy];
      //}

      wx = x + 1; wy = y;
      if(bounds(wx, wy)) {
        b += fog_calc(fog[wx][wy]) * brightness[c][wx][wy];
      }

      //wx = x + 1; wy = y - 1;
      //if(bounds(wx, wy)) {
      //  b += brightness[c][wx][wy];
      //}

      wx = x; wy = y - 1;
      if(bounds(wx, wy)) {
        b += fog_calc(fog[wx][wy]) * brightness[c][wx][wy];
      }

      //wx = x - 1; wy = y - 1;
      //if(bounds(wx, wy)) {
      //  b += brightness[c][wx][wy];
      //}

      b /= 4.0f;

      if(occupancy[x][y] <= 0) {
        brightness[(c + 1) % 2][x][y] = b;
      }
    }
  }

  c += 1;
  c %= 2;
}

bool is_equilibrium() {
  for(int x = 0; x < 32; x += 1) {
    for(int y = 0; y < 32; y += 1) {
      if(brightness[0][x][y] != brightness[1][x][y]) {
        return false;
      }
    }
  }

  return true;
}

void emit_lights(int player_x, int player_y) {
  for(int i = 0; i < LIGHTS_SIZE; i += 1) {
    int x = lights[i].x;
    int y = lights[i].y;

    if(lights[i].attachment_id != -1) {
      x = player_x;
      y = player_y;
    }

    brightness[c][x][y] += lights[i].bright;
  }
}

int main() {
  const int screen_width = 320, screen_height = 320;

  const int cols = 32;
  const int rows = 32;

  int player_x = 0;
  int player_y = 0;

  InitWindow(screen_width, screen_height, "Cellular Light Propegation");
  SetTargetFPS(10);
  Camera2D camera = {0};
  camera.target = (Vector2){0, 0};
  camera.offset = (Vector2){0, 0};
  camera.rotation = 0.0f;
  camera.zoom = 1.0f;

  while(!WindowShouldClose()) {
    int prev_player_x = player_x;
    int prev_player_y = player_y;

    if(IsKeyDown(KEY_A) && player_x != 0) {
      player_x -= 1;
    }

    if(IsKeyDown(KEY_D) && player_x != cols - 1) {
      player_x += 1;
    }

    if(IsKeyDown(KEY_W) && player_y != 0) {
      player_y -= 1;
    }

    if(IsKeyDown(KEY_S) && player_y != rows - 1) {
      player_y += 1;
    }

    if(occupancy[player_x][player_y] != 0) {
      player_x = prev_player_x;
      player_y = prev_player_y;
    }

    {
      for(int x = 0; x < 32; x += 1) {
        for(int y = 0; y < 32; y += 1) {
          brightness[0][x][y] = 0.0f;
          brightness[1][x][y] = 0.0f;
        }
      }

      emit_lights(player_x, player_y);

      for(int i = 0; i < 128; i += 1) {
        propegate_brightness();
        emit_lights(player_x, player_y);
      }
    }

    float max_bright = 0.0;

    for(int x = 0; x < cols; x += 1) {
      for(int y = 0; y < rows; y += 1) {
        if(brightness[c][x][y] > max_bright) {
          max_bright = brightness[c][x][y];
        }
      }
    }

    BeginDrawing();
    {
      ClearBackground(RAYWHITE);
      BeginMode2D(camera);
      {
        const int width = 10;
        const int height = 10;

        // draw lighting
        for(int x = 0; x < rows; x += 1) {
          for(int y = 0; y < cols; y += 1) {
            float bright = brightness[c][x][y] / max_bright;
            bright = powf(bright, 1.0f / 2.2f);
            Color color = ColorFromHSV(0.0, 0.0, bright);

            DrawRectangle(x * width, y * height, width, height, color);
          }
        }

        // draw player
        DrawRectangle(player_x * width, player_y * height, width, height, BLACK);
      }
      EndMode2D();
    }
    EndDrawing();
  }

  CloseWindow();

  return 0;
}
